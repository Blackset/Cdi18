// manipuler une pile d’entiers gérée avec un tableau et un indice.

// Une pile d’entiers est une structure de données qui permet 
// de stocker des entiers et de les restituer dans un ordre bien précis. 
// Ces données seront restituées une à une sur demande selon la règle : dernière entrée, première sortie    
// ( LIFO: Last In First Out ). Ceci correspond à l'usage habituel d'une pile d'assiettes ou de torchons. 

// Cette pile est réalisée à l’aide d’un tableau d’entier et d’un indice de parcours. 

//1) Donnez le principe de fonctionnement avec les structures de données de cette pile (ajout et retrait d’un élément)  
// en étudiant particulièrement ce qui se passe quand le tableau est vide et quand il est plein. 
// 2) Donnez les interfaces des procédures «init_pile», «empiler», «dépiler». 
// 3) Donnez les algorithmes des trois procédures.


1-Constantes / Types :

//CONSTANTE
TAILLETAB= 10	// taille tableau d'entiers
//TYPE
tabentier= tableau[TAILLETAB] entiers	//tableau d'entiers

pile= enregistrement
		
		tab: tabentier
		
		indice: entier
		
	finenregistrement
			

2-Principe de fonctionnement :

//Lorsqu on ajoute un élément on le place au dessus du dernier inséré donc indice + 1 
//Lorsqu on enleve un élément on place l'indice en dessous de celui-ci donc indice - 1

//si l'indice est égal à 0 (liste vide) ou égal à la taille de la liste (liste pleine)
//on ne peut pas retirer ou ajouter d'entier

//on initialise la liste en positionnant l'indice sur le premier élément,
//les anciens éléments seront alors écrasés

3-Interface :

fonction init_pile(entrée liste: pile): pile
	// cette fonction positionne l'indice au début de la liste
	
fonction empiler(entrée sortie liste: pile, entrée val: entier): booléen
	// cette fonction permet d'ajouter une valeur après le dernier élément
	// de la liste, si la liste est pleine elle renvoie faux
	
	// liste est en entrée : la liste dans laquelle on ajoute une valeur
	//			 en sortie : la liste avec la nouvelle valeur et le nouvel indice, si elle n'est pas pleine
	
	// val est la valeur à ajouter
	
	// retourne vrai si val est ajouté, faux si la liste est pleine
	
fonction depiler(entrée sortie liste: pile, sortie val: entier): booléen
	// cette fonction permet de retirer un élément de la liste
	// si la liste est vide elle renvoie faux
	
	// liste est en entrée : la liste dans laquelle on ajoute une valeur
	//			 en sortie : la liste avec le nouvel indice si elle n'est pas vide
	
	// val la valeur de l'entier dépilé
	
	// retourne vrai si l'indice recule, faux si la liste est pleine


